import yt_dlp
from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.editor import concatenate_videoclips
from moviepy.video.compositing.CompositeVideoClip import clips_array
from PIL import Image
import os
import time
import subprocess
import json

def download_video(url, output_path):

    cleanup_videos_folder(output_path)

    video_path = os.path.join(output_path, "video.mp4")
    audio_path = os.path.join(output_path, "—Å")
    final_output = os.path.join(output_path, "merged.mp4")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    ydl_video_opts = {
        'outtmpl': video_path,
        'format': '136',
        'overwrites': True,
        'restrictfilenames': True
    }

    # 2. –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
    ydl_audio_opts = {
        'outtmpl': audio_path,
        'format': '140',
        'overwrites': True,
        'restrictfilenames': True
    }

    try:
        with yt_dlp.YoutubeDL(ydl_video_opts) as ydl:
            ydl.download([url])
        with yt_dlp.YoutubeDL(ydl_audio_opts) as ydl:
            ydl.download([url])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        raise e

    # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ ffmpeg
    try:
        subprocess.run([
            "ffmpeg",
            "-y",  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            "-i", video_path,
            "-i", audio_path,
            "-c:v", "copy",
            "-c:a", "aac",
            "-shortest",
            final_output
        ], check=True)

        os.remove(video_path)
        os.remove(audio_path)
        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –≤: {final_output}")
        return final_output
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
        raise e


def cleanup_videos_folder(folder_path="videos"):
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º...")
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
                print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω: {file_path}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    print("‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def delete_video(path):
    try:
        if os.path.exists(path):
            os.remove(path)
            print(f"–§–∞–π–ª {path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")

def get_video_dimensions(video_path):
    result = subprocess.run(
        [
            "ffprobe", "-v", "error",
            "-select_streams", "v:0",
            "-show_entries", "stream=width,height",
            "-of", "json",
            video_path
        ],
        capture_output=True, text=True
    )
    info = json.loads(result.stdout)
    width = info["streams"][0]["width"]
    height = info["streams"][0]["height"]
    return width, height


def get_padding_top(original_w, original_h, target_w=1080, target_h=1920):
    scale_factor = min(target_w / original_w, target_h / original_h)
    scaled_h = int(original_h * scale_factor)
    padding_top = int((target_h - scaled_h) / 2)
    return padding_top

def handle_prepare_and_merge_ffmpeg_diagonal_mask (main_path, loop_path, output_path):
    w, h = get_video_dimensions(main_path)
    padding_top = get_padding_top(w, h)
    prepare_and_merge_ffmpeg_diagonal_mask(main_path, loop_path, output_path, padding_top)

def prepare_and_merge_ffmpeg_70_30(main_path, loop_path, output_path):
    target_width = 1080
    target_full_height = 1920
    target_top_height = int(target_full_height * 0.7)  # 70% –æ—Ç –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç—ã (1344)
    target_bottom_height = target_full_height - target_top_height  # 30% –æ—Ç –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç—ã (576)
    # –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–µ–∑–∫–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    # –§–∏–ª—å—Ç—Ä complex_filter –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
    # [0:v] - –±–µ—Ä–µ–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (main_path)
    # scale=-2:1344 - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –¥–æ 1344, —à–∏—Ä–∏–Ω—É –∞–≤—Ç–æ (-2 –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á–µ—Ç–Ω–æ—Å—Ç—å)
    # crop=1080:1344 - –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 1080x1344
    # setsar=1 - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –ø–∏–∫—Å–µ–ª–µ–π 1:1
    # [top] - –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–º—É –≤—ã—Ö–æ–¥—É —Ñ–∏–ª—å—Ç—Ä–∞ (–≤–µ—Ä—Ö–Ω–∏–π –∫–ª–∏–ø)
    # [1:v] - –±–µ—Ä–µ–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (loop_path)
    # scale=1080:-2, crop=1080:576, setsar=1 - —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –∫–ª–∏–ø–∞
    # [bottom] - –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–º—É –≤—ã—Ö–æ–¥—É —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–∏–∂–Ω–∏–π –∫–ª–∏–ø)
    # [top][bottom]vstack - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π –∫–ª–∏–ø—ã
    # [outv] - –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
    ffmpeg_command = [
        "ffmpeg",
        "-i", main_path,
        "-stream_loop", "-1",  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        "-i", loop_path,
        "-filter_complex",
        f"[0:v]scale=-2:{target_top_height},crop={target_width}:{target_top_height}:x=(iw-{target_width})/2:y=(ih-{target_top_height})/2,setsar=1[top];"
        f"[1:v]scale={target_width}:-2,crop={target_width}:{target_bottom_height}:x=(iw-{target_width})/2:y=(ih-{target_bottom_height})/2,setsar=1[bottom];"
        f"[top][bottom]vstack,format=yuv420p[outv]",
        "-map", "[outv]", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
        "-map", "0:a?", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, '?' –¥–µ–ª–∞–µ—Ç –µ–≥–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º)
        "-c:v", "libx264",
        "-c:a", "aac",
        "-b:v", "3000k", # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
        "-r", "30", # FPS
        "-preset", "veryfast", # –ü—Ä–µ—Å–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        "-threads", "8",
        "-crf", "25", # –ö–∞—á–µ—Å—Ç–≤–æ
        "-profile:v", "main",
        "-level", "4.0",
        "-movflags", "+faststart",
        "-tune", "fastdecode",
        "-g", "30",
        "-keyint_min", "30",
        "-sc_threshold", "0",
        "-maxrate", "3000k",
        "-bufsize", "6000k",
        "-shortest",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–æ–π –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ
        output_path
    ]

    print("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã FFmpeg:")
    print(" ".join(ffmpeg_command))
    
    try:
        result = subprocess.run(ffmpeg_command, check=True, capture_output=True, text=True)
        print("FFmpeg stdout:", result.stdout)
        print("FFmpeg stderr:", result.stderr)
        print("FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è FFmpeg:\n{e.stderr}")
        raise e
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
        raise FileNotFoundError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")

def prepare_and_merge_ffmpeg_50_50(main_path, loop_path, output_path):
    target_width = 1080
    target_full_height = 1920
    target_half_height = target_full_height // 2  # 50% –æ—Ç –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç—ã (960)
    
    ffmpeg_command = [
        "ffmpeg",
        "-i", main_path,
        "-stream_loop", "-1",
        "-i", loop_path,
        "-filter_complex",
        f"[0:v]scale=-2:{target_half_height},crop={target_width}:{target_half_height}:x=(iw-{target_width})/2:y=(ih-{target_half_height})/2,setsar=1[top];"
        f"[1:v]scale={target_width}:-2,crop={target_width}:{target_half_height}:x=(iw-{target_width})/2:y=(ih-{target_half_height})/2,setsar=1[bottom];"
        f"[top][bottom]vstack,format=yuv420p[outv]",
        "-map", "[outv]",
        "-map", "0:a?",
        "-c:v", "libx264",
        "-c:a", "aac",
        "-b:v", "3000k",
        "-r", "30",
        "-preset", "veryfast",
        "-threads", "8",
        "-crf", "25",
        "-profile:v", "main",
        "-level", "4.0",
        "-movflags", "+faststart",
        "-tune", "fastdecode",
        "-g", "30",
        "-keyint_min", "30",
        "-sc_threshold", "0",
        "-maxrate", "3000k",
        "-bufsize", "6000k",
        "-shortest",
        output_path
    ]

    try:
        result = subprocess.run(ffmpeg_command, check=True, capture_output=True, text=True)
        print("FFmpeg stdout:", result.stdout)
        print("FFmpeg stderr:", result.stderr)
        print("FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è FFmpeg:\n{e.stderr}")
        raise e
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
        raise FileNotFoundError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")

def prepare_and_merge_ffmpeg_30_70(main_path, loop_path, output_path):
    target_width = 1080
    target_full_height = 1920
    target_top_height = int(target_full_height * 0.3)  # 30% –æ—Ç –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç—ã (576)
    target_bottom_height = target_full_height - target_top_height  # 70% –æ—Ç –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç—ã (1344)
    
    ffmpeg_command = [
        "ffmpeg",
        "-i", main_path,
        "-stream_loop", "-1",
        "-i", loop_path,
        "-filter_complex",
        f"[0:v]scale=-2:{target_top_height},crop={target_width}:{target_top_height}:x=(iw-{target_width})/2:y=(ih-{target_top_height})/2,setsar=1[top];"
        f"[1:v]scale={target_width}:-2,crop={target_width}:{target_bottom_height}:x=(iw-{target_width})/2:y=(ih-{target_bottom_height})/2,setsar=1[bottom];"
        f"[top][bottom]vstack,format=yuv420p[outv]",
        "-map", "[outv]",
        "-map", "0:a?",
        "-c:v", "libx264",
        "-c:a", "aac",
        "-b:v", "3000k",
        "-r", "30",
        "-preset", "veryfast",
        "-threads", "8",
        "-crf", "25",
        "-profile:v", "main",
        "-level", "4.0",
        "-movflags", "+faststart",
        "-tune", "fastdecode",
        "-g", "30",
        "-keyint_min", "30",
        "-sc_threshold", "0",
        "-maxrate", "3000k",
        "-bufsize", "6000k",
        "-shortest",
        output_path
    ]

    try:
        result = subprocess.run(ffmpeg_command, check=True, capture_output=True, text=True)
        print("FFmpeg stdout:", result.stdout)
        print("FFmpeg stderr:", result.stderr)
        print("FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è FFmpeg:\n{e.stderr}")
        raise e
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
        raise FileNotFoundError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")

def prepare_and_merge_ffmpeg_blur_bars(main_path, output_path):
    ffmpeg_command = [
        "ffmpeg",
        "-i", main_path,
        "-filter_complex",
        (
            "[0:v]split=2[bg][fg];"
            "[bg]scale=1080:1920,boxblur=20:1[blurred];"
            "[fg]scale=iw*min(1080/iw\\,1920/ih):ih*min(1080/iw\\,1920/ih),setsar=1[main];"
            "[blurred][main]overlay=(W-w)/2:(H-h)/2,format=yuv420p[outv]"
        ),
        "-map", "[outv]",
        "-map", "0:a?",
        "-c:v", "libx264",
        "-c:a", "aac",
        "-b:v", "3500k",
        "-r", "30",
        "-preset", "veryfast",
        "-crf", "23",
        "-profile:v", "high",
        "-level", "4.0",
        "-movflags", "+faststart",
        "-shortest",
        output_path
    ]

    try:
        result = subprocess.run(ffmpeg_command, check=True, capture_output=True, text=True)
        print("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        print("FFmpeg stdout:\n", result.stdout)
    except subprocess.CalledProcessError as e:
        print("‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:")
        print(e.stderr)
        raise e
            # "[1:v]scale=1080:1920,boxblur=20:1[blurred_bg];"
            # "color=white@1.0:s=1080x1920:r=30:d=15[white];"
            # "[white]drawbox=x=0:y=960:w=1080:h=10:color=black@1.0:t=fill,"
            # "rotate=0.785398:ow=rotw(0):oh=roth(0):c=white@1.0[mask_raw];"
            # "[mask_raw]fps=30,trim=duration=14,setpts=PTS-STARTPTS[mask_trimmed];"
            # "[0:v]scale=iw*min(1080/iw\\,1920/ih):ih*min(1080/iw\\,1920/ih),setsar=1[main];"
            # "[mask_trimmed][main]scale2ref[mask_scaled][main2];"
            # "[main2][mask_scaled]alphamerge[main_masked];"
            # "[blurred_bg][main_masked]overlay=(W-w)/2:(H-h)/2,format=yuv420p[outv]"
def prepare_and_merge_ffmpeg_diagonal_mask(main_path, loop_path, output_path, padding_top):
    ffmpeg_command = [
        "ffmpeg",
        "-i", main_path,
        "-stream_loop", "-1",
        "-i", loop_path,
        "-filter_complex",
        (
            # –®–∞–≥ 1: –∑–∞–¥–Ω–∏–π —Ñ–æ–Ω (—Ä–∞–∑–º—ã—Ç–∏–µ)
            "[1:v]scale=1080:1920,boxblur=20:1[blurred];"

            # –®–∞–≥ 2: –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Å–∫–∞
            "color=black:s=3000x3000:d=15[mask_base1];"
            "[mask_base1]drawbox=x=0:y=1500:w=3000:h=10:color=white@1.0:t=fill,"
            "rotate=-0.523599:ow=1080:oh=1920:c=black,"
            "scale=1080:1920[mask1];"

            # –®–∞–≥ 3: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏ –ø–∞–¥–¥–∏–Ω–≥ –¥–æ 1080x1920
            "[0:v]scale=iw*min(1080/iw\\,1920/ih):ih*min(1080/iw\\,1920/ih),setsar=1[scaled];"
            "[scaled]pad=1080:1920:(1080-in_w)/2:(1920-in_h)/2[main];"

            # –®–∞–≥ 4: –º–∞—Å–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å—ã (—Ç–∞–º –≥–¥–µ —Å–≤–µ—Ä—Ö—É —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω)
            "color=black:s=1080x1920:d=15[mask_base2];"
            "[mask_base2]drawbox=x=0:y={}:w=1080:h=760:color=white@1.0:t=fill[mask2];"

            # "[mask_base2]drawbox=x=0:y=(1920-in_h)/2-30:w=1080:h=30:color=white@1.0:t=fill[mask2];"

            # –®–∞–≥ 5: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Å–æ–∫
            "[mask1][mask2]blend=all_mode=lighten[mask_combined];"

            # –®–∞–≥ 6: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∞–ª—å—Ñ–∞-–º–∞—Å–∫–∞
            "[mask_combined]fps=30,setpts=PTS-STARTPTS,format=gray[alpha_mask];"

            #–¢–ï–°–¢
            #"[main][alpha_mask]overlay=0:0[outv]"

            # –®–∞–≥ 7: –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–ª—å—Ñ—É –∫ —Ñ–æ–Ω—É
            "[blurred][alpha_mask]alphamerge[blurred_masked];"

            # –®–∞–≥ 8: —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–≤–µ—Ä—Ö masked-—Ñ–æ–Ω–∞
            "[main][blurred_masked]overlay=0:0,format=yuv420p[outv]"
        ),
        "-map", "[outv]",
        "-map", "0:a?",
        "-c:v", "libx264",
        "-c:a", "aac",
        "-b:v", "3500k",
        "-r", "30",
        "-preset", "veryfast",
        "-crf", "23",
        "-profile:v", "high",
        "-level", "4.0",
        "-movflags", "+faststart",
        "-threads", "4",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        "-max_muxing_queue_size", "1024",  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        "-max_interleave_delta", "0",  # –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ª–∏–≤–∏–Ω–≥
        "-shortest",
        output_path
    ]

    try:
        result = subprocess.run(ffmpeg_command, check=True, text=True)
        print("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
    except subprocess.CalledProcessError as e:
        if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
            print("‚ö†Ô∏è FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –Ω–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
            print("–û—à–∏–±–∫–∞ FFmpeg:\n", e.stderr)
            return  # –∏–ª–∏ return output_path, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å
        else:
            print("‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            print(e.stderr)
            raise e
